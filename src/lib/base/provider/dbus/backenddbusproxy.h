/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p provider/dbus/backenddbusproxy -i common/company.h -i common/line.h -i common/ride.h -i common/station.h common/dbus/backend.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef BACKENDDBUSPROXY_H_1370116919
#define BACKENDDBUSPROXY_H_1370116919

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "common/company.h"
#include "common/line.h"
#include "common/ride.h"
#include "common/station.h"

/*
 * Proxy class for interface org.SfietKonstantin.pt2
 */
class OrgSfietKonstantinPt2Interface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.SfietKonstantin.pt2"; }

public:
    OrgSfietKonstantinPt2Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgSfietKonstantinPt2Interface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> registerBackendProgress(int progress)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(progress);
        return asyncCallWithArgumentList(QLatin1String("registerBackendProgress"), argumentList);
    }

    inline QDBusPendingReply<> registerBackendReady(const QStringList &capabilities, const QString &copyright)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(capabilities) << QVariant::fromValue(copyright);
        return asyncCallWithArgumentList(QLatin1String("registerBackendReady"), argumentList);
    }

    inline QDBusPendingReply<> registerBackendStart()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("registerBackendStart"), argumentList);
    }

    inline QDBusPendingReply<> registerError(const QString &request, const QString &errorId, const QString &error)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(request) << QVariant::fromValue(errorId) << QVariant::fromValue(error);
        return asyncCallWithArgumentList(QLatin1String("registerError"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace SfietKonstantin {
    typedef ::OrgSfietKonstantinPt2Interface pt2;
  }
}
#endif
