/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -a manager/dbus/dbusbackendwrapperadaptor -i dbusbackendwrapper.h -l PublicTransportation::DBusBackendWrapper common/dbus/backend.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "manager/dbus/dbusbackendwrapperadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class PublictransportationAdaptor
 */

PublictransportationAdaptor::PublictransportationAdaptor(PublicTransportation::DBusBackendWrapper *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

PublictransportationAdaptor::~PublictransportationAdaptor()
{
    // destructor
}

void PublictransportationAdaptor::registerBackend(const QStringList &capabilities)
{
    // handle method call org.SfietKonstantin.publictransportation.registerBackend
    parent()->registerBackend(capabilities);
}

void PublictransportationAdaptor::registerCopyright(const QString &request, const QString &copyright)
{
    // handle method call org.SfietKonstantin.publictransportation.registerCopyright
    parent()->registerCopyright(request, copyright);
}

void PublictransportationAdaptor::registerError(const QString &request, const QString &errorId, const QString &error)
{
    // handle method call org.SfietKonstantin.publictransportation.registerError
    parent()->registerError(request, errorId, error);
}

void PublictransportationAdaptor::registerJourneysFromStation(const QString &request, const QList<PublicTransportation::InfoJourneys> & infoJourneys)
{
    // handle method call org.SfietKonstantin.publictransportation.registerJourneysFromStation
    parent()->registerJourneysFromStation(request, infoJourneys);
}

void PublictransportationAdaptor::registerSuggestedStations(const QString &request, const QList<PublicTransportation::Station> & suggestedStations)
{
    // handle method call org.SfietKonstantin.publictransportation.registerSuggestedStations
    parent()->registerSuggestedStations(request, suggestedStations);
}

void PublictransportationAdaptor::registerWaitingTime(const QString &request, const QList<PublicTransportation::WaitingTime> & waitingTimeList)
{
    // handle method call org.SfietKonstantin.publictransportation.registerWaitingTime
    parent()->registerWaitingTime(request, waitingTimeList);
}

