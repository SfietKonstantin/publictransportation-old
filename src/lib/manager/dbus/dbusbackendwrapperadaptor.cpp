/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i common/company.h -i dbusbackendwrapper.h -a manager/dbus/dbusbackendwrapperadaptor -l PublicTransportation::DBusBackendWrapper common/dbus/backend.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "manager/dbus/dbusbackendwrapperadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class PublictransportationAdaptor
 */

PublictransportationAdaptor::PublictransportationAdaptor(PublicTransportation::DBusBackendWrapper *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

PublictransportationAdaptor::~PublictransportationAdaptor()
{
    // destructor
}

void PublictransportationAdaptor::registerBackend(const QStringList &capabilities)
{
    // handle method call org.SfietKonstantin.publictransportation.registerBackend
    parent()->registerBackend(capabilities);
}

void PublictransportationAdaptor::registerListedCompanies(const QList<PublicTransportation::Company> & companies)
{
    // handle method call org.SfietKonstantin.publictransportation.registerListedCompanies
    parent()->registerListedCompanies(companies);
}

void PublictransportationAdaptor::registerListedJourneys(const PublicTransportation::Company & company, const PublicTransportation::Line & line, const QList<PublicTransportation::Journey> & journeys)
{
    // handle method call org.SfietKonstantin.publictransportation.registerListedJourneys
    parent()->registerListedJourneys(company, line, journeys);
}

void PublictransportationAdaptor::registerListedLines(const PublicTransportation::Company & company, const QList<PublicTransportation::Line> & lines)
{
    // handle method call org.SfietKonstantin.publictransportation.registerListedLines
    parent()->registerListedLines(company, lines);
}

void PublictransportationAdaptor::registerListedStations(const PublicTransportation::Company & company, const PublicTransportation::Line & line, const PublicTransportation::Journey & journey, const QList<PublicTransportation::Station> & stations)
{
    // handle method call org.SfietKonstantin.publictransportation.registerListedStations
    parent()->registerListedStations(company, line, journey, stations);
}

